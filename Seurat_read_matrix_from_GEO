https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE142581

> library(Seurat)
> setwd("~/Desktop/single_cell/GSE142581_RAW")
> library(dplyr)
> counts71 <- read.table("GSM4232371_0dpi-ActD.txt.gz", header = TRUE, row.names = 1, as.is = TRUE)
> GSM71 <- CreateSeuratObject(counts = counts71, min.cells = 3, project = "DLLNOTCH")
> GSM71
An object of class Seurat 
15917 features across 2062 samples within 1 assay 
Active assay: RNA (15917 features)
> GSM71[["percent.mt"]] <- PercentageFeatureSet(GSM71, pattern = "^mt-")
> head(GSM71@meta.data, 5)
           orig.ident nCount_RNA nFeature_RNA percent.mt
CELL286335   DLLNOTCH       5236         2227   3.418640
CELL286339   DLLNOTCH       4670         2049   2.312634
CELL286345   DLLNOTCH       4088         1866   2.274951
CELL286346   DLLNOTCH       3887         1789   2.521225
CELL286347   DLLNOTCH       3703         1769   2.133405
> VlnPlot(GSM71, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
 


> GSM71 <- subset(GSM71, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
> GSM71 <- NormalizeData(GSM71, normalization.method = "LogNormalize", scale.factor = 10000)
> GSM71 <- FindVariableFeatures(GSM71, selection.method = "vst", nfeatures = 2000)
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
> top10 <- head(VariableFeatures(GSM71), 10)
> top10
[1] "A330069E16Rik" "Gfod2"         "Gal"           "AC122428.3"    "Cxcl2"        
 [6] "Nppc"          "Actb"          "Ccl2"          "Ankrd1"        "Cd74"  
> plot1 <- VariableFeaturePlot(GSM71)
> plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
 
> GSM71 <- ScaleData(GSM71)
Centering and scaling data matrix
  |======================================================================| 100%
> all.genes <- rownames(GSM71)
> GSM71 <- ScaleData(GSM71, features = all.genes)
Centering and scaling data matrix
  |======================================================================| 100%
> GSM71 <- ScaleData(GSM71, vars.to.regress = "percent.mt")
Regressing out percent.mt
  |======================================================================| 100%
Centering and scaling data matrix
  |======================================================================| 100%
> GSM71 <- RunPCA(GSM71, features = VariableFeatures(object = GSM71))
PC_ 1 
Positive:  mt-Rnr2, Ube2c, Zfp36, Fos, Rps18-ps3, Egr1, Cox8b, Lgals1, Nr4a1, Gm9844 
	   Rps19-ps6, Gm3788, Sparc, Meg3, Dnajb1, Gm13588, Gm11175, Jun, Hsp90ab1, Tmsb10 
	   Rplp0, Hspa1a, Ifrd1, Eef1g, Eef1b2, Cebpd, Gm19248, Gm8730, Atf3, Zfp36l1 
Negative:  Mt1, Plaur, Ifitm1, mt-Tc, Ifit1, Slc35b3, Rptor, E4f1, Sp4, Cxcl5 
	   Neu2, Cpsf7, H2-Q4, Gm10616, Mt4, Gm45718, Rxra, Gm42899, Ly6c1, Camkmt 
	   Lrrc28, Kdm6b, Gm38299, Phc2, Gm6254, Vtn, Cmtr1, Brd8, Slc4a1ap, Pramef8 
PC_ 2 
Positive:  Actb, Kdm6b, Nfia, Spry2, Lrrc58, Abhd2, Notch2, Sdc4, Slc39a1, Pam 
	   Insig1, Skil, Pdpn, Pim1, Rbm15, Srrm2, Gm12940, Kdelr2, Ncam1, Erdr1 
	   Myf5, Sept10, Clasp2, Ttyh2, Dusp3, Lrrc8a, Kmt2d, Gm17066, Gm13588, Hsf2 
Negative:  Egr1, mt-Rnr2, Zfp36, Ube2c, Cox8b, Fos, Gm11175, Rps18-ps3, Mt1, Jun 
	   Junb, Nr4a1, Ubc, Cebpd, Dnajb1, Nfkbiz, Btg2, Arpc3, Rps19-ps6, Ogdh 
	   Cryzl1, Klf10, Id3, Socs3, Mgp, Hist1h2bc, S1pr3, H2-Q4, CT030247.1, Mdh2 
PC_ 3 
Positive:  Gm13588, Tmsb10, Gm3788, Gm9844, Gm19248, Gm8034, Lgals1, Dcn, S100a6, Igfbp6 
	   Crip2, Gm22133, Ftl1, Gm44184, Gp1bb, Sept5, Clic1, Ly6a, Crip1, Ftl1-ps1 
	   Serpinf1, S100a10, Pi16, Gm5526, Dynll1, Mfap5, Fn1, Vim, Txn-ps1, Gm8730 
Negative:  Mt1, Kdm6b, Junb, Btg2, Fos, Notch2, Sdc4, Jun, Spry2, Pde4b 
	   Socs3, Egr1, Id3, Actb, Zfp36l1, Skil, Cebpd, Gem, Mat2a, Slc39a1 
	   Cxcl1, Srrm2, Nppc, Zfp36, Sik1, Gm15844, Atf3, Mpp7, Gadd45a, Jag1 
PC_ 4 
Positive:  Mt1, Cxcl1, Cxcl2, Arid5b, Ccl2, Srxn1, Errfi1, Gal, Akap2, Pold4 
	   AC156031.4, Nfkb1, Odc1, Runx1, Plaur, Tgif1, 1810011O10Rik, Fosl1, Sdc4, Pdpn 
	   Vmp1, Slc39a14, Erfe, Cxcl3, Neu2, Hmox1, Clcf1, Manf, S100a10, Txnrd1 
Negative:  Fos, Fosb, Hspa1b, Jun, Jund, Nr4a1, Atf3, Hspa1a, Hspb1, Hsp25-ps1 
	   Hes1, Dnajb1, Myf5, Btg2, Eef1g, Hspe1, Ubc, Bhlhe40, Irf1, Gm4366 
	   Hsph1, Egr3, Clasp2, Junb, Gm6542, Hspe1-ps6, Insig1, Klf13, Atoh8, Id1 
PC_ 5 
Positive:  Igfbp6, Dcn, Ly6a, Fn1, Sept5, Gp1bb, Pi16, Mfap5, Col1a2, Clec3b 
	   Mgp, Fstl3, Gpc3, Tmem100, Ly6c1, Fbln2, Gja1, S100a6, Dhrs3, Btbd2 
	   C1s1, Smpd3, Gadd45g, Cd248, Cd9, Dlc1, Crip1, Tnxb, Foxp1, Gltp 
Negative:  Gm8730, Rplp0, Chrdl2, Gm43712, Rpl3-ps1, Meg3, AC132344.3, Rps19-ps6, Erfe, Gm13588 
	   Rps3a3, Gm3788, Gm9320, Tmsb10, Gm9844, Gm9625, Hsp90b1, Gm44184, Gm8034, Eef1b2 
	   Actg1, Arl4d, Gm19248, Eif4ebp1, Gm12816, Hspe1-ps3, Nppc, Odc1, Rbpj, Manf 
> print(GSM71[["pca"]], dims = 1:5, nfeatures = 5)
PC_ 1 
Positive:  mt-Rnr2, Ube2c, Zfp36, Fos, Rps18-ps3 
Negative:  Mt1, Plaur, Ifitm1, mt-Tc, Ifit1 
PC_ 2 
Positive:  Actb, Kdm6b, Nfia, Spry2, Lrrc58 
Negative:  Egr1, mt-Rnr2, Zfp36, Ube2c, Cox8b 
PC_ 3 
Positive:  Gm13588, Tmsb10, Gm3788, Gm9844, Gm19248 
Negative:  Mt1, Kdm6b, Junb, Btg2, Fos 
PC_ 4 
Positive:  Mt1, Cxcl1, Cxcl2, Arid5b, Ccl2 
Negative:  Fos, Fosb, Hspa1b, Jun, Jund 
PC_ 5 
Positive:  Igfbp6, Dcn, Ly6a, Fn1, Sept5 
Negative:  Gm8730, Rplp0, Chrdl2, Gm43712, Rpl3-ps1
> DimPlot(GSM71, reduction = "pca")
 
> DimHeatmap(GSM71, dims = 1, cells = 500, balanced = TRUE)
 
> ElbowPlot(GSM71)
 
“As in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the FindNeighbors function, and takes as input the previously defined dimensionality of the dataset (first 10 PCs).”–Seurat official guideline.
> GSM71 <- FindNeighbors(GSM71, dims = 1:10)
Computing nearest neighbor graph
Computing SNN
> GSM71 <- FindClusters(GSM71, resolution = 0.3)
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 2062
Number of edges: 66357

Running Louvain algorithm...
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Maximum modularity in 10 random starts: 0.7417
Number of communities: 2
Elapsed time: 0 seconds
> levels(GSM71)
[1] "0" "1"
> GSM71 <- RunTSNE(GSM71, dims = 1:10)
> DimPlot(GSM71, reduction = "tsne", label = TRUE)
 
> VlnPlot(GSM71, features = c("Notch2"))
 
> features <- c("Pax7", "Myod1", "Myog", "Notch2")
> FeaturePlot(GSM71, features = features, label = T)
 
> DimPlot(GSM71, reduction = "tsne", label = TRUE)
 
> RidgePlot(GSM71, features = c("Notch2", "Sdc4", "Spry2", "Kdm6b"))
Picking joint bandwidth of 0.138
Picking joint bandwidth of 0.251
Picking joint bandwidth of 0.28
Picking joint bandwidth of 0.361
 
> GSM71.markers <- FindAllMarkers(GSM71)
> top10markers <- GSM71.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.5.2 
> DoHeatmap(GSM71, features = top10markers$gene, label = F) + scale_fill_gradientn(colors = colorRampPalette(c("#0000ff", "#ffffff", "#ff0000"))(256))
Scale for 'fill' is already present. Adding another scale for 'fill',
which will replace the existing scale.
 
> saveRDS(GSM71, file = "~/Desktop/single_cell/71_new.rds")

> new.cluster.ids <- c("Quiescence", "Notch2-high", "Quiescence")
> names(new.cluster.ids) <- levels(GSM71)
> GSM71 <- RenameIdents(GSM71, new.cluster.ids)
> DimPlot(GSM71, reduction = "tsne", label = TRUE)
