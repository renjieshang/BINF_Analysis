pip install scanpy
pip install pandas
pip install anndata
import scanpy as sc
import pandas as pd
import anndata as ad
import os
import numpy as np
adata = sc.read_h5ad('/Users/srj/Desktop/DataAnalysis/CRISPRscreen/Nature2023/adata_skm_lineage_20210916.h5ad')
adata
pip install louvain
types = adata.obs['celltype']
types
AACACGTGTCAGAAGC-5386STDY7537944            PAX3+MyoProg
AACCGCGGTCTTTCAT-5386STDY7537944            PAX3+MyoProg
AACGTTGGTTCGTTGA-5386STDY7537944                   MyoB1
AACTGGTCATCCGCGA-5386STDY7537944       PAX3+PAX7+MyoProg
AAGGCAGGTATTACCG-5386STDY7537944       PAX3+PAX7+MyoProg
                                             ...        
TTGACTTTCTGCGTAA-WSSS_THYst9384958                 MyoB2
TTGCGTCTCAGGCGAA-WSSS_THYst9384958     PAX3+PAX7+MyoProg
TTGTAGGAGATATGGT-WSSS_THYst9384958                 MyoB2
TTTACTGGTCTCGTTC-WSSS_THYst9384958             MYH3+MyoC
TTTGCGCCACGGTGTC-WSSS_THYst9384958    PAX7+SPON2+MyoProg
Name: celltype, Length: 12376, dtype: category
Categories (10, object): ['PAX3+MyoProg' < 'PAX3+PAX7+MyoProg' < 'PAX7+SPON2+MyoProg' < 'PAX7+NTN5+MyoProg' ... 'MYH3+MyoC' < 'MyoB2' < 'MyoC2' < 'MYL3+MyoC']
sc.pl.highest_expr_genes(adata, n_top=20) 
sc.pl.draw_graph(adata, color='celltype', legend_loc='on data')
sc.pl.heatmap(adata, ['PAX3','ID1','ID2','ID3','HEY1','MSC','HES1','PAX7','NTN5','SPON2','RGS4','FST','NEFM','SAMD11','MYH3','MYOD1','MYOG','CCER2','RGR','KRT31','TNFSF13B','MYLPF','TNNT3','MYL3','MB'], groupby='celltype',)
adata.obs['tissue']
AACACGTGTCAGAAGC-5386STDY7537944      LowerLimb
AACCGCGGTCTTTCAT-5386STDY7537944      LowerLimb
AACGTTGGTTCGTTGA-5386STDY7537944      LowerLimb
AACTGGTCATCCGCGA-5386STDY7537944      LowerLimb
AAGGCAGGTATTACCG-5386STDY7537944      LowerLimb
                                        ...    
TTGACTTTCTGCGTAA-WSSS_THYst9384958    LowerLimb
TTGCGTCTCAGGCGAA-WSSS_THYst9384958    LowerLimb
TTGTAGGAGATATGGT-WSSS_THYst9384958    LowerLimb
TTTACTGGTCTCGTTC-WSSS_THYst9384958    LowerLimb
TTTGCGCCACGGTGTC-WSSS_THYst9384958    LowerLimb
Name: tissue, Length: 12376, dtype: category
Categories (2, object): ['LowerLimb', 'UpperLimb']
group1 = ['MyoB1', 'MYH3+MyoC']
adata_subset1 = adata[adata.obs['celltype'].isin(group1)]
adata_subset1
adata_subset1.obs['celltype']
sc.tl.rank_genes_groups(adata_subset1, 'celltype', method='wilcoxon')
sc.pl.rank_genes_groups(adata_subset1, n_genes=35, sharey=False)
sc.pl.violin(adata_subset1, ['NPM1','HNRNPA1','TNNC1','MYH3'], groupby='celltype')
sc.get.rank_genes_groups_df(adata_subset1, group="MyoB1")
df = sc.get.rank_genes_groups_df(adata_subset1, group="MyoB1")
df.to_csv("/Users/srj/Desktop/DataAnalysis/CRISPRscreen/Nature2023/B1_vs_MYH3&MyoC.csv")
#你还可以单独比较某两个cluster的差异基因：

#比如cluster 0和1：

sc.tl.rank_genes_groups(adata, 'celltype', groups=['MyoB1'], reference='MYH3+MyoC', method='wilcoxon')

sc.pl.rank_genes_groups(adata, groups=['MyoB1'], n_genes=35)
#结果一致
#以后就可以这样比了，不用单独创建sub adata
#比如myob2和myh3

sc.tl.rank_genes_groups(adata, 'celltype', groups=['MyoB2'], reference='MYH3+MyoC', method='wilcoxon')
sc.pl.rank_genes_groups(adata, groups=['MyoB2'], n_genes=35)
#反过来看一下
sc.tl.rank_genes_groups(adata, 'celltype', groups=['MYH3+MyoC'], reference='MyoB2', method='wilcoxon')
sc.pl.rank_genes_groups(adata, groups=['MYH3+MyoC'], n_genes=35)
##检查一下上述差异基因是否各在列表的尾首
##注意此时的环境变量是myh3比myob2，而非107步
sc.get.rank_genes_groups_df(adata, group='MYH3+MyoC')
names	scores	logfoldchanges	pvals	pvals_adj
0	TNNC1	21.916821	9.914712	1.795701e-106	2.518097e-102
1	MYH3	21.914276	9.118387	1.898874e-106	2.518097e-102
2	MYL1	21.861492	8.131099	6.043688e-106	5.343023e-102
3	TTN	21.726509	7.561390	1.152390e-104	6.416255e-101
4	TNNC2	21.724283	7.941656	1.209610e-104	6.416255e-101
...	...	...	...	...	...
26517	PFN1	-17.249800	-1.276637	1.122863e-66	3.384155e-64
26518	MEST	-17.728363	-2.642309	2.533015e-70	8.612900e-68
26519	HNRNPA1	-18.119799	-1.240052	2.224062e-73	8.674496e-71
26520	NPM1	-18.406778	-1.197018	1.159178e-75	5.300641e-73
26521	PTMA	-19.749296	-2.103685	8.134222e-87	5.393396e-84
26522 rows × 5 columns
##保存表格，注意记得反向排列score才是myob2比myh3！
df2 = sc.get.rank_genes_groups_df(adata, group="MYH3+MyoC")
df2.to_csv("/Users/srj/Desktop/DataAnalysis/CRISPRscreen/Nature2023/B2_vs_MYH3&MyoC.csv")##名字暂时这么叫，要记得改排序

##draw more figures
group2 = ['MyoB1','MyoB2','MyoC1','MyoC2','MYL3+MyoC', 'MYH3+MyoC']
adata_subset2 = adata[adata.obs['celltype'].isin(group2)]
sc.pl.draw_graph(adata_subset2, color='celltype', legend_loc='on data')
sc.pl.draw_graph(adata_subset2, color='DRAP1', legend_loc='on data')
sc.pl.heatmap(adata_subset2, ['MYMX'], groupby='celltype')
sc.pl.stacked_violin(adata_subset2, ['MYMX'], groupby='celltype', swap_axes=False, dendrogram=True)
sc.pl.tracksplot(adata_subset2, ['MYMX'], groupby='celltype',dendrogram=True, colorbar_title='mean z-score', vmin=-2, vmax=2, cmap='RdBu_r') 

#根据细胞分群来计算差异基因，相当于Seurat里的metadata
###B1B2 vs C1C2
#原来的分群（celltype）不会消失/被替代，而是在obs下新建了一个分类方式：B1B2C1C2
adata.obs['B1B2C1C2'] = adata.obs['celltype'].replace({'MyoB1':'B1B2','MyoB2':'B1B2','MyoC1':'C1C2','MyoC2':'C1C2'})
adata.obs['B1B2C1C2']
AACACGTGTCAGAAGC-5386STDY7537944            PAX3+MyoProg
AACCGCGGTCTTTCAT-5386STDY7537944            PAX3+MyoProg
AACGTTGGTTCGTTGA-5386STDY7537944                    B1B2
AACTGGTCATCCGCGA-5386STDY7537944       PAX3+PAX7+MyoProg
AAGGCAGGTATTACCG-5386STDY7537944       PAX3+PAX7+MyoProg
                                             ...        
TTGACTTTCTGCGTAA-WSSS_THYst9384958                  B1B2
TTGCGTCTCAGGCGAA-WSSS_THYst9384958     PAX3+PAX7+MyoProg
TTGTAGGAGATATGGT-WSSS_THYst9384958                  B1B2
TTTACTGGTCTCGTTC-WSSS_THYst9384958             MYH3+MyoC
TTTGCGCCACGGTGTC-WSSS_THYst9384958    PAX7+SPON2+MyoProg
Name: B1B2C1C2, Length: 12376, dtype: category
Categories (8, object): ['PAX3+MyoProg' < 'PAX3+PAX7+MyoProg' < 'PAX7+SPON2+MyoProg' < 'PAX7+NTN5+MyoProg' < 'B1B2' < 'C1C2' < 'MYH3+MyoC' < 'MYL3+MyoC']

##以b1b2/c1c2来找de genes，与其他细胞无关
sc.tl.rank_genes_groups(adata,'B1B2C1C2',groups=['B1B2'], reference='C1C2',method='wilcoxon')
sc.get.rank_genes_groups_df(adata,'B1B2')

names	scores	logfoldchanges	pvals	pvals_adj
0	PTMA	37.686844	1.301331	0.000000e+00	0.000000e+00
1	MEST	36.139221	2.275149	5.494739e-286	2.428858e-282
2	GPC3	30.642014	2.792587	3.376362e-206	3.581915e-203
3	MDK	30.332561	2.353760	4.267103e-202	4.191559e-199
4	IGFBP5	29.275787	3.105407	2.109487e-188	1.695388e-185
...	...	...	...	...	...
26517	ACTC1	-36.003521	-2.963856	7.368114e-284	2.791673e-280
26518	RASSF4	-36.774578	-2.503988	4.706782e-296	2.496665e-292
26519	SEPT4	-37.727283	-3.354564	0.000000e+00	0.000000e+00
26520	MYOG	-37.844891	-2.551809	0.000000e+00	0.000000e+00
26521	SELENOW	-40.640636	-2.631406	0.000000e+00	0.000000e+00
26522 rows × 5 columns

sc.pl.violin(adata, ['PTMA','MEST','MYOG','SELENOW'], groupby='B1B2C1C2', rotation=90)
dfB1B2C1C2 = sc.get.rank_genes_groups_df(adata, 'B1B2')
dfB1B2C1C2.to_csv("/Users/srj/Desktop/DataAnalysis/CRISPRscreen/Nature2023/B1B2_vs_C1C2.csv")

###B1B2 vs PAX，same thing：
#Replace 'cell_pop_1', 'cell_pop_2' with your actual cell population labels.
adata.obs['B1B2PAX'] = adata.obs['celltype'].replace({'MyoB1':'B1B2','MyoB2':'B1B2','PAX3+MyoProg':'PAX','PAX3+PAX7+MyoProg':'PAX','PAX7+SPON2+MyoProg':'PAX','PAX7+NTN5+MyoProg':'PAX'})
adata.obs['B1B2PAX']

AACACGTGTCAGAAGC-5386STDY7537944            PAX
AACCGCGGTCTTTCAT-5386STDY7537944            PAX
AACGTTGGTTCGTTGA-5386STDY7537944           B1B2
AACTGGTCATCCGCGA-5386STDY7537944            PAX
AAGGCAGGTATTACCG-5386STDY7537944            PAX
                                        ...    
TTGACTTTCTGCGTAA-WSSS_THYst9384958         B1B2
TTGCGTCTCAGGCGAA-WSSS_THYst9384958          PAX
TTGTAGGAGATATGGT-WSSS_THYst9384958         B1B2
TTTACTGGTCTCGTTC-WSSS_THYst9384958    MYH3+MyoC
TTTGCGCCACGGTGTC-WSSS_THYst9384958          PAX
Name: B1B2PAX, Length: 12376, dtype: category
Categories (6, object): ['PAX' < 'B1B2' < 'MyoC1' < 'MYH3+MyoC' < 'MyoC2' < 'MYL3+MyoC']

sc.tl.rank_genes_groups(adata,'B1B2PAX',groups=['PAX'], reference='B1B2',method='wilcoxon')
sc.get.rank_genes_groups_df(adata,'PAX')
sc.pl.violin(adata, ['PEG10','MSC','CKB','PFN1'], groupby='B1B2PAX', rotation=90)
dfB1B2PAX = sc.get.rank_genes_groups_df(adata, 'PAX') ##注意此处是以pax比b1b2
dfB1B2PAX.to_csv("/Users/srj/Desktop/DataAnalysis/CRISPRscreen/Nature2023/PAX_vs_B1B2.csv")

##最终看看确实obs末尾多了两个我们自定义的分群方式：b1b2c1c2和b1b2pax
AnnData object with n_obs × n_vars = 12376 × 26522
    obs: 'batch', 'percent_mito', 'n_counts', 'n_genes', 'bh_pval', 'region', 'tissue', 'adj_stage', 'adj_sample', 'leiden', 'S_score', 'G2M_score', 'phase', 'predicted_labels', 'celltype', 'B1B2C1C2', 'B1B2PAX'
    var: 'gene_ids', 'feature_types', 'n_cells', 'highly_variableWSSS_THYst8796437', 'highly_variableWSSS_THYst8796442', 'highly_variable5478STDY7935101', 'highly_variable5478STDY7935102', 'highly_variableWSSS_THYst8796439', 'highly_variableWSSS_THYst9384956', 'highly_variable5478STDY7717491', 'highly_variableWSSS_THYst9384953', 'highly_variable5478STDY7717492', 'highly_variableWSSS_THYst9384955', 'highly_variable5386STDY7537944', 'highly_variableWSSS_THYst9384954', 'highly_variableFCAImmP7536759', 'highly_variable5478STDY7980349', 'highly_variableWSSS_THYst8796438', 'highly_variable5478STDY7652318', 'highly_variableWSSS_THYst8796441', 'highly_variableFCAImmP7536758', 'highly_variableWSSS_THYst9384957', 'highly_variable5478STDY7980348', 'highly_variable5386STDY7557337', 'highly_variable5386STDY7557336', 'highly_variableWSSS_THYst9384958', 'highly_variableWSSS_THYst8796440', 'highly_variable5386STDY7557335', 'highly_variable_n', 'highly_variable'
    uns: 'adj_stage_colors', 'batch_colors', 'celltype_colors', 'celltype_sizes', 'diffmap_evals', 'draw_graph', 'leiden', 'leiden_R_colors', 'leiden_colors', 'leiden_sizes', 'log1p', 'majority_voting_colors', 'marker_m_leiden_R_celltype', 'markers_celltype', 'markers_new_celltype', 'neighbors', 'paga', 'pca', 'phase_colors', 'pre-annotation_colors', 'rank_genes_groups', 'region_colors', 'tissue_colors', 'umap', 'B1B2C1C2_colors', 'B1B2PAX_colors'
    obsm: 'X_draw_graph_fa'
    obsp: 'connectivities', 'distances'
